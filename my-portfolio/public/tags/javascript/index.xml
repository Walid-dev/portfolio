<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JavaScript on Walid&#39;s Portfolio</title>
    <link>http://localhost:1313/tags/javascript/</link>
    <description>Recent content in JavaScript on Walid&#39;s Portfolio</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 15 Mar 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/javascript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>JavaScript Classes</title>
      <link>http://localhost:1313/blogs/javascript_classes/</link>
      <pubDate>Fri, 15 Mar 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blogs/javascript_classes/</guid>
      <description>Mastering JavaScript Classes JavaScript classes are a fundamental part of modern web development, offering a more structured approach to object-oriented programming (OOP) in JavaScript. Introduced in ECMAScript 2015 (ES6), classes provide a syntactical sugar over JavaScript&amp;rsquo;s existing prototype-based inheritance, making it easier to create objects, manage inheritance, and write cleaner, more readable code.&#xA;Introduction The concept of classes in JavaScript may seem daunting at first, especially if you come from a non-OOP background.</description>
    </item>
    <item>
      <title>JavaScript Array Methods</title>
      <link>http://localhost:1313/blogs/javascript-arrays/</link>
      <pubDate>Thu, 29 Feb 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blogs/javascript-arrays/</guid>
      <description>Understanding JavaScript Array Methods Introduction JavaScript arrays are versatile data structures that allow you to store multiple values in a single variable. Array methods in JavaScript provide powerful tools for manipulating these collections, making data handling more efficient and intuitive. This article dives into the most commonly used array methods, offering insights and code examples to enhance your JavaScript programming skills.&#xA;Core Concepts Iteration Methods forEach The forEach method executes a provided function once for each array element.</description>
    </item>
    <item>
      <title>React Hooks</title>
      <link>http://localhost:1313/blogs/react-hooks/</link>
      <pubDate>Wed, 28 Feb 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blogs/react-hooks/</guid>
      <description>Understanding React Hooks React Hooks represent a significant advancement in the way React applications are developed. Since their introduction in React 16.8, Hooks have revolutionized functional components, providing them with the capa bility to use state and other React features without writing a class. This guide delves into the core concepts of React Hooks, offering insights and code examples to enhance your understanding and application of these powerful features.&#xA;Introduction React Hooks offer a more direct API to the React concepts you already know: props, state, context, refs, and lifecycle.</description>
    </item>
    <item>
      <title>React Native: Learn once, run anywhere</title>
      <link>http://localhost:1313/blogs/react-native-intro/</link>
      <pubDate>Sun, 25 Feb 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blogs/react-native-intro/</guid>
      <description>Introduction React Native, a brainchild of Facebook, revolutionizes mobile development by leveraging JavaScript and React&amp;rsquo;s declarative UI framework to build native mobile apps for iOS and Android from a single codebase. This guide uncovers the what, why, and how of React Native, providing insights into its mechanism, benefits, and practical application.&#xA;What is React Native? React Native is an open-source framework that bridges the gap between web and mobile development platforms, allowing developers to craft mobile applications using the familiar tools and paradigms of web development while achieving the performance and look and feel of native applications.</description>
    </item>
    <item>
      <title>The &#39;this&#39; Keyword in JavaScript: A Comprehensive Guide</title>
      <link>http://localhost:1313/blogs/javascript-this/</link>
      <pubDate>Sun, 25 Feb 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blogs/javascript-this/</guid>
      <description>Introduction Understanding the this keyword in JavaScript is crucial for mastering the language. It is a context-sensitive keyword that changes its value depending on where and how a function is called. This guide dives deep into the various contexts of this, providing clarity through detailed explanations and code snippets.&#xA;What is &amp;rsquo;this&#39;? In JavaScript, this refers to the object that is currently executing or invoking the function. The value of this is determined by the execution context, except for arrow functions, which lexically bind this.</description>
    </item>
    <item>
      <title>Arrow Functions in JavaScript</title>
      <link>http://localhost:1313/blogs/javascript-arrow-function/</link>
      <pubDate>Sat, 24 Feb 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blogs/javascript-arrow-function/</guid>
      <description>Introduction Arrow functions, introduced in ECMAScript 6 (ES6), have become an integral part of JavaScript, offering a concise syntax for writing functions and clarifying the behavior of the this keyword. This guide explores arrow functions in depth, from their syntax to advanced use cases, contrasting them with traditional function expressions to elucidate their advantages and appropriate usage.&#xA;What are Arrow Functions? Arrow functions provide a streamlined syntax for writing functions in JavaScript, emphasizing shorter, single-expression functions and lexical scoping of this.</description>
    </item>
    <item>
      <title>Polymorphism in Object-Oriented Programming: Concepts and Examples</title>
      <link>http://localhost:1313/blogs/oop-polymorphism/</link>
      <pubDate>Fri, 23 Feb 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blogs/oop-polymorphism/</guid>
      <description>Introduction Polymorphism, a core concept in Object-Oriented Programming (OOP), enables objects of different classes to be treated as objects of a common superclass. It&amp;rsquo;s a principle that enhances flexibility and modularity in software development.&#xA;Understanding Polymorphism Polymorphism allows methods to do different things based on the object it is acting upon, despite sharing the same name. This capability is crucial for implementing interface-based programming and method overriding.&#xA;Non-Technical Example Consider a simple action like &amp;lsquo;drawing.</description>
    </item>
    <item>
      <title>Abstraction in Object-Oriented Programming</title>
      <link>http://localhost:1313/blogs/oop-abstraction/</link>
      <pubDate>Thu, 22 Feb 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blogs/oop-abstraction/</guid>
      <description>Introduction Abstraction in Object-Oriented Programming (OOP) simplifies complex systems by modeling classes with a focus on essential attributes and behaviors. It hides detailed implementations from the user, facilitating interaction through a simplified interface.&#xA;Essence of Abstraction Abstraction in OOP is like viewing a complex machine through a simplified control panel. It emphasizes what the system does over how it does it, enabling developers to work with higher-level concepts.&#xA;Everyday Analogy Consider a car: drivers interact with it through a simplified interface (steering wheel, pedals) without needing to understand the complexities of its internal mechanics.</description>
    </item>
    <item>
      <title>Encapsulation in Object-Oriented Programming</title>
      <link>http://localhost:1313/blogs/oop-encapsulation/</link>
      <pubDate>Thu, 22 Feb 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blogs/oop-encapsulation/</guid>
      <description>Introduction to Encapsulation Encapsulation, a cornerstone of Object-Oriented Programming (OOP), encapsulates data and operations on data within objects, shielding the internal state from unauthorized access. This principle enhances modularity, maintainability, and data integrity within software applications.&#xA;The Pillars of Encapsulation Encapsulation intertwines with other OOP principles like abstraction, inheritance, and polymorphism, but it stands out by offering:&#xA;Data Hiding: Restricting access to the internal state of an object. Interface Exposure: Exposing a controlled interface to interact with an object&amp;rsquo;s data.</description>
    </item>
    <item>
      <title>TypeScript: Elevating JavaScript Development</title>
      <link>http://localhost:1313/blogs/typescript/</link>
      <pubDate>Thu, 22 Feb 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blogs/typescript/</guid>
      <description>Introduction to TypeScript TypeScript, a superset of JavaScript developed by Microsoft, introduces static typing to the language. It aims to make development on large JavaScript projects more manageable and less error-prone.&#xA;Core Concepts of TypeScript TypeScript&amp;rsquo;s static typing allows developers to define the types of their variables, functions, and objects. This addition brings significant advantages:&#xA;Early Error Detection: Errors can be caught at compile time. Readability and Maintainability: Types make the code easier to read and maintain.</description>
    </item>
    <item>
      <title>JavaScript: Core Concepts and Evolution</title>
      <link>http://localhost:1313/blogs/javascript-intro/</link>
      <pubDate>Tue, 20 Feb 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blogs/javascript-intro/</guid>
      <description>Introduction JavaScript was created in 1995 by Brendan Eich while working at Netscape. It started as a way to make web pages interactive and has grown to become a cornerstone of web development, alongside HTML and CSS.&#xA;The Start of JavaScript Origin: JavaScript was initially created to add interactivity to web pages. Netscape Navigator was the first browser to implement it. Naming: It was first called Mocha, then LiveScript, and finally renamed JavaScript.</description>
    </item>
    <item>
      <title>Design Patterns</title>
      <link>http://localhost:1313/blogs/design_patterns/</link>
      <pubDate>Fri, 16 Feb 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blogs/design_patterns/</guid>
      <description>Introduction Software design patterns are typical solutions to common problems in software design. They serve as templates for solving recurring design issues, promoting more efficient and effective development practices. This guide focuses on JavaScript and PHP examples to explore significant design patterns.&#xA;Creational Patterns Creational patterns provide mechanisms for object creation, increasing flexibility and reuse of existing code.&#xA;Factory Method in JavaScript The Factory Method pattern defines an interface for creating an object, letting subclasses alter the type of objects that will be created.</description>
    </item>
    <item>
      <title>Redux: Managing State in JavaScript Apps</title>
      <link>http://localhost:1313/blogs/react-redux/</link>
      <pubDate>Fri, 16 Feb 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blogs/react-redux/</guid>
      <description>Redux: Simplifying State Management Redux is a predictable state container for JavaScript apps, often used with libraries like React, Angular, and Vue. It helps manage the state of an application in a single global object, making state mutations predictable through a strict contract of actions and reducers.&#xA;Why Redux? Redux provides a clear structure for managing state, making it easier to debug and test applications. It&amp;rsquo;s particularly useful in complex applications where multiple components need access to the same state.</description>
    </item>
    <item>
      <title>React JS</title>
      <link>http://localhost:1313/blogs/react-introduction/</link>
      <pubDate>Tue, 07 Nov 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blogs/react-introduction/</guid>
      <description>React&amp;rsquo;s Origin Story React wasn&amp;rsquo;t born in a vacuum. It was Facebook&amp;rsquo;s answer to specific challenges: managing vast, dynamic user interfaces with data changing all the time. Before React, updating user interfaces efficiently was a major headache for developers. React&amp;rsquo;s solution? The virtual DOM, a game-changer that allowed for minimal actual DOM manipulation, leading to significant performance improvements.&#xA;The Virtual DOM Explained The virtual DOM is a lightweight copy of the real DOM.</description>
    </item>
  </channel>
</rss>
