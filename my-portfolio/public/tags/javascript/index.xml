<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JavaScript on Walid&#39;s Portfolio</title>
    <link>http://localhost:1313/tags/javascript/</link>
    <description>Recent content in JavaScript on Walid&#39;s Portfolio</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 22 Feb 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/javascript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>TypeScript: Elevating JavaScript Development</title>
      <link>http://localhost:1313/blogs/typescript/</link>
      <pubDate>Thu, 22 Feb 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blogs/typescript/</guid>
      <description>Introduction to TypeScript TypeScript, a superset of JavaScript developed by Microsoft, introduces static typing to the language. It aims to make development on large JavaScript projects more manageable and less error-prone.&#xA;Core Concepts of TypeScript TypeScript&amp;rsquo;s static typing allows developers to define the types of their variables, functions, and objects. This addition brings significant advantages:&#xA;Early Error Detection: Errors can be caught at compile time. Readability and Maintainability: Types make the code easier to read and maintain.</description>
    </item>
    <item>
      <title>JavaScript: Core Concepts and Evolution</title>
      <link>http://localhost:1313/blogs/javascript-intro/</link>
      <pubDate>Tue, 20 Feb 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blogs/javascript-intro/</guid>
      <description>Introduction JavaScript was created in 1995 by Brendan Eich while working at Netscape. It started as a way to make web pages interactive and has grown to become a cornerstone of web development, alongside HTML and CSS.&#xA;The Start of JavaScript Origin: JavaScript was initially created to add interactivity to web pages. Netscape Navigator was the first browser to implement it. Naming: It was first called Mocha, then LiveScript, and finally renamed JavaScript.</description>
    </item>
    <item>
      <title>Design Patterns</title>
      <link>http://localhost:1313/blogs/design_patterns/</link>
      <pubDate>Fri, 16 Feb 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blogs/design_patterns/</guid>
      <description>Introduction Software design patterns are typical solutions to common problems in software design. They serve as templates for solving recurring design issues, promoting more efficient and effective development practices. This guide focuses on JavaScript and PHP examples to explore significant design patterns.&#xA;Creational Patterns Creational patterns provide mechanisms for object creation, increasing flexibility and reuse of existing code.&#xA;Factory Method in JavaScript The Factory Method pattern defines an interface for creating an object, letting subclasses alter the type of objects that will be created.</description>
    </item>
    <item>
      <title>Redux: Managing State in JavaScript Apps</title>
      <link>http://localhost:1313/blogs/react-redux/</link>
      <pubDate>Fri, 16 Feb 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blogs/react-redux/</guid>
      <description>Redux: Simplifying State Management Redux is a predictable state container for JavaScript apps, often used with libraries like React, Angular, and Vue. It helps manage the state of an application in a single global object, making state mutations predictable through a strict contract of actions and reducers.&#xA;Why Redux? Redux provides a clear structure for managing state, making it easier to debug and test applications. It&amp;rsquo;s particularly useful in complex applications where multiple components need access to the same state.</description>
    </item>
    <item>
      <title>React JS</title>
      <link>http://localhost:1313/blogs/react-introduction/</link>
      <pubDate>Tue, 07 Nov 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blogs/react-introduction/</guid>
      <description>React&amp;rsquo;s Origin Story React wasn&amp;rsquo;t born in a vacuum. It was Facebook&amp;rsquo;s answer to specific challenges: managing vast, dynamic user interfaces with data changing all the time. Before React, updating user interfaces efficiently was a major headache for developers. React&amp;rsquo;s solution? The virtual DOM, a game-changer that allowed for minimal actual DOM manipulation, leading to significant performance improvements.&#xA;The Virtual DOM Explained The virtual DOM is a lightweight copy of the real DOM.</description>
    </item>
  </channel>
</rss>
