<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hooks on Walid&#39;s Portfolio</title>
    <link>http://localhost:1313/tags/hooks/</link>
    <description>Recent content in Hooks on Walid&#39;s Portfolio</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 28 Feb 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/hooks/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>React Hooks</title>
      <link>http://localhost:1313/blogs/react-hooks/</link>
      <pubDate>Wed, 28 Feb 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blogs/react-hooks/</guid>
      <description>Understanding React Hooks React Hooks represent a significant advancement in the way React applications are developed. Since their introduction in React 16.8, Hooks have revolutionized functional components, providing them with the capa bility to use state and other React features without writing a class. This guide delves into the core concepts of React Hooks, offering insights and code examples to enhance your understanding and application of these powerful features.&#xA;Introduction React Hooks offer a more direct API to the React concepts you already know: props, state, context, refs, and lifecycle.</description>
    </item>
    <item>
      <title>useContext in React</title>
      <link>http://localhost:1313/blogs/react-usecontext/</link>
      <pubDate>Tue, 20 Feb 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blogs/react-usecontext/</guid>
      <description>Introduction to useContext The useContext hook in React simplifies the way we manage and access state across different components. By allowing for a more direct way to share data, it helps avoid the prop-drilling problem, making code cleaner and more maintainable.&#xA;Why useContext? useContext offers a straightforward approach to share data like themes, user preferences, and more across your application&amp;rsquo;s component tree. It&amp;rsquo;s especially useful in large applications where passing props through many levels becomes cumbersome.</description>
    </item>
  </channel>
</rss>
