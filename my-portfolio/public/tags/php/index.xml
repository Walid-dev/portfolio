<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>PHP on Walid&#39;s Portfolio</title>
    <link>http://localhost:63827/tags/php/</link>
    <description>Recent content in PHP on Walid&#39;s Portfolio</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 23 Feb 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:63827/tags/php/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Polymorphism in Object-Oriented Programming: Concepts and Examples</title>
      <link>http://localhost:63827/blogs/oop-polymorphism/</link>
      <pubDate>Fri, 23 Feb 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:63827/blogs/oop-polymorphism/</guid>
      <description>Introduction Polymorphism, a core concept in Object-Oriented Programming (OOP), enables objects of different classes to be treated as objects of a common superclass. It&amp;rsquo;s a principle that enhances flexibility and modularity in software development.&#xA;Understanding Polymorphism Polymorphism allows methods to do different things based on the object it is acting upon, despite sharing the same name. This capability is crucial for implementing interface-based programming and method overriding.&#xA;Non-Technical Example Consider a simple action like &amp;lsquo;drawing.</description>
    </item>
    <item>
      <title>Abstraction in Object-Oriented Programming</title>
      <link>http://localhost:63827/blogs/oop-abstraction/</link>
      <pubDate>Thu, 22 Feb 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:63827/blogs/oop-abstraction/</guid>
      <description>Introduction Abstraction in Object-Oriented Programming (OOP) simplifies complex systems by modeling classes with a focus on essential attributes and behaviors. It hides detailed implementations from the user, facilitating interaction through a simplified interface.&#xA;Essence of Abstraction Abstraction in OOP is like viewing a complex machine through a simplified control panel. It emphasizes what the system does over how it does it, enabling developers to work with higher-level concepts.&#xA;Everyday Analogy Consider a car: drivers interact with it through a simplified interface (steering wheel, pedals) without needing to understand the complexities of its internal mechanics.</description>
    </item>
    <item>
      <title>Encapsulation in Object-Oriented Programming</title>
      <link>http://localhost:63827/blogs/oop-encapsulation/</link>
      <pubDate>Thu, 22 Feb 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:63827/blogs/oop-encapsulation/</guid>
      <description>Introduction to Encapsulation Encapsulation, a cornerstone of Object-Oriented Programming (OOP), encapsulates data and operations on data within objects, shielding the internal state from unauthorized access. This principle enhances modularity, maintainability, and data integrity within software applications.&#xA;The Pillars of Encapsulation Encapsulation intertwines with other OOP principles like abstraction, inheritance, and polymorphism, but it stands out by offering:&#xA;Data Hiding: Restricting access to the internal state of an object. Interface Exposure: Exposing a controlled interface to interact with an object&amp;rsquo;s data.</description>
    </item>
    <item>
      <title>PHP</title>
      <link>http://localhost:63827/blogs/introduction_to_php/</link>
      <pubDate>Tue, 20 Feb 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:63827/blogs/introduction_to_php/</guid>
      <description>PHP: The Server-Side Scripting Language PHP, or Hypertext Preprocessor, began as a small open-source project in 1995. It&amp;rsquo;s now one of the most widely used server-side scripting languages, especially for web development. It powers everything from blogs and forums to e-commerce and social networks.&#xA;PHP by the Numbers Usage: Powers over 78% of all websites with a known server-side programming language, including major platforms like WordPress. Community: Large and active, contributing to a vast ecosystem of frameworks, libraries, and tools.</description>
    </item>
    <item>
      <title>Design Patterns</title>
      <link>http://localhost:63827/blogs/design_patterns/</link>
      <pubDate>Fri, 16 Feb 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:63827/blogs/design_patterns/</guid>
      <description>Introduction Software design patterns are typical solutions to common problems in software design. They serve as templates for solving recurring design issues, promoting more efficient and effective development practices. This guide focuses on JavaScript and PHP examples to explore significant design patterns.&#xA;Creational Patterns Creational patterns provide mechanisms for object creation, increasing flexibility and reuse of existing code.&#xA;Factory Method in JavaScript The Factory Method pattern defines an interface for creating an object, letting subclasses alter the type of objects that will be created.</description>
    </item>
    <item>
      <title>Object-Oriented Programming: Principles and Practices</title>
      <link>http://localhost:63827/blogs/oop/</link>
      <pubDate>Thu, 11 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:63827/blogs/oop/</guid>
      <description>Introduction Object-Oriented Programming (OOP) is a programming paradigm based on the concept of &amp;ldquo;objects&amp;rdquo;, which can contain data and code: data in the form of fields (often known as attributes or properties), and code, in the form of procedures (often known as methods).&#xA;Core Principles of OOP OOP is built around four main principles: encapsulation, abstraction, inheritance, and polymorphism. These principles help developers create more modular, reusable, and maintainable code.</description>
    </item>
  </channel>
</rss>
