<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Frontend on Walid&#39;s Portfolio</title>
    <link>http://localhost:1313/tags/frontend/</link>
    <description>Recent content in Frontend on Walid&#39;s Portfolio</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 19 Feb 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/frontend/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>React Hooks: Elevating Basics with Advanced Examples</title>
      <link>http://localhost:1313/blogs/react-hooks/</link>
      <pubDate>Mon, 19 Feb 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blogs/react-hooks/</guid>
      <description>Introduction React Hooks offer a revolutionary approach to handling state and lifecycle features in functional components. This guide revisits the basics of React Hooks, supplemented with advanced examples to provide a deeper understanding for developers familiar with the fundamentals.&#xA;useState: State Management useState is the cornerstone of state management in functional components, allowing for the declaration of state variables in React.&#xA;Advanced Example: State with Previous Value const [count, setCount] = useState(0); // Increment count based on previous value const increment = () =&amp;gt; { setCount(prevCount =&amp;gt; prevCount + 1); }; useEffect: Side Effects useEffect manages side effects in functional components, replacing lifecycle methods from class components.</description>
    </item>
    <item>
      <title>Design Patterns</title>
      <link>http://localhost:1313/blogs/design_patterns/</link>
      <pubDate>Fri, 16 Feb 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blogs/design_patterns/</guid>
      <description>Introduction Software design patterns are typical solutions to common problems in software design. They serve as templates for solving recurring design issues, promoting more efficient and effective development practices. This guide focuses on JavaScript and PHP examples to explore significant design patterns.&#xA;Creational Patterns Creational patterns provide mechanisms for object creation, increasing flexibility and reuse of existing code.&#xA;Factory Method in JavaScript The Factory Method pattern defines an interface for creating an object, letting subclasses alter the type of objects that will be created.</description>
    </item>
    <item>
      <title>FlexGrid: The Guide to Responsive Web Design</title>
      <link>http://localhost:1313/blogs/flexgrid/</link>
      <pubDate>Fri, 22 Dec 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blogs/flexgrid/</guid>
      <description>Introduction FlexGrid, a combination of Flexible Box (Flexbox) and CSS Grid Layout, represents the pinnacle of layout design tools in modern web development. It offers the best of both worlds: the flexibility of Flexbox with the precision of Grid Layout. This guide delves into the core concepts, advantages, and practical uses of FlexGrid in responsive web design.&#xA;Understanding FlexGrid FlexGrid is not a standalone CSS property but a conceptual model that leverages the strengths of both Flexbox and CSS Grid.</description>
    </item>
  </channel>
</rss>
