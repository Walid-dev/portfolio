<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Frontend on Walid&#39;s Portfolio</title>
    <link>http://localhost:1313/tags/frontend/</link>
    <description>Recent content in Frontend on Walid&#39;s Portfolio</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 22 Feb 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/frontend/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Mastering Layouts with CSS Grid</title>
      <link>http://localhost:1313/blogs/css-grid/</link>
      <pubDate>Thu, 22 Feb 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blogs/css-grid/</guid>
      <description>Introduction to CSS Grid CSS Grid represents a paradigm shift in web layout design, offering a grid-based layout system that enhances both the simplicity and complexity of web designs. It facilitates handling rows and columns together, a significant step beyond the capabilities of Flexbox.&#xA;CSS Grid vs. Flexbox Flexbox is one-dimensional, optimal for layouts focusing on a single row or column. CSS Grid, however, operates on two dimensions, allowing developers to manage the layout across rows and columns simultaneously.</description>
    </item>
    <item>
      <title>React JS</title>
      <link>http://localhost:1313/blogs/react-introduction/</link>
      <pubDate>Thu, 22 Feb 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blogs/react-introduction/</guid>
      <description>React&amp;rsquo;s Origin Story React wasn&amp;rsquo;t born in a vacuum. It was Facebook&amp;rsquo;s answer to specific challenges: managing vast, dynamic user interfaces with data changing all the time. Before React, updating user interfaces efficiently was a major headache for developers. React&amp;rsquo;s solution? The virtual DOM, a game-changer that allowed for minimal actual DOM manipulation, leading to significant performance improvements.&#xA;The Virtual DOM Explained The virtual DOM is a lightweight copy of the real DOM.</description>
    </item>
    <item>
      <title>Composition in React: Building Flexible Components</title>
      <link>http://localhost:1313/blogs/react_composition/</link>
      <pubDate>Tue, 20 Feb 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blogs/react_composition/</guid>
      <description>Embracing Composition in React Composition is a core concept in React that promotes building components by composing smaller, reusable pieces. Unlike inheritance, composition provides a more flexible way to build up UIs by utilizing a &amp;ldquo;has-a&amp;rdquo; rather than an &amp;ldquo;is-a&amp;rdquo; relationship between components.&#xA;Why Composition? Composition allows developers to create components that encapsulate behavior and UI elements, which can then be composed together to form more complex UIs. This model encourages code reuse and simplifies the maintenance of large applications.</description>
    </item>
    <item>
      <title>useContext in React</title>
      <link>http://localhost:1313/blogs/react-usecontext/</link>
      <pubDate>Tue, 20 Feb 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blogs/react-usecontext/</guid>
      <description>Introduction to useContext The useContext hook in React simplifies the way we manage and access state across different components. By allowing for a more direct way to share data, it helps avoid the prop-drilling problem, making code cleaner and more maintainable.&#xA;Why useContext? useContext offers a straightforward approach to share data like themes, user preferences, and more across your application&amp;rsquo;s component tree. It&amp;rsquo;s especially useful in large applications where passing props through many levels becomes cumbersome.</description>
    </item>
    <item>
      <title>Design Patterns</title>
      <link>http://localhost:1313/blogs/design_patterns/</link>
      <pubDate>Fri, 16 Feb 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blogs/design_patterns/</guid>
      <description>Introduction Software design patterns are typical solutions to common problems in software design. They serve as templates for solving recurring design issues, promoting more efficient and effective development practices. This guide focuses on JavaScript and PHP examples to explore significant design patterns.&#xA;Creational Patterns Creational patterns provide mechanisms for object creation, increasing flexibility and reuse of existing code.&#xA;Factory Method in JavaScript The Factory Method pattern defines an interface for creating an object, letting subclasses alter the type of objects that will be created.</description>
    </item>
    <item>
      <title>Redux: Managing State in JavaScript Apps</title>
      <link>http://localhost:1313/blogs/react-redux/</link>
      <pubDate>Fri, 16 Feb 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blogs/react-redux/</guid>
      <description>Redux: Simplifying State Management Redux is a predictable state container for JavaScript apps, often used with libraries like React, Angular, and Vue. It helps manage the state of an application in a single global object, making state mutations predictable through a strict contract of actions and reducers.&#xA;Why Redux? Redux provides a clear structure for managing state, making it easier to debug and test applications. It&amp;rsquo;s particularly useful in complex applications where multiple components need access to the same state.</description>
    </item>
    <item>
      <title>Tailwind CSS: Revolutionizing Styling for the Web</title>
      <link>http://localhost:1313/blogs/css_tailwind/</link>
      <pubDate>Mon, 29 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blogs/css_tailwind/</guid>
      <description>Tailwind CSS: A New Approach to Styling Tailwind CSS emerged as a utility-first CSS framework, aiming to solve common frustrations with traditional CSS approaches. Developed by Adam Wathan, Jonathan Reinink, David Hemphill, and Steve Schoger, it was officially released in November 2017. Tailwind&amp;rsquo;s philosophy centers on providing low-level utility classes to build custom designs without writing CSS from scratch.&#xA;Why Tailwind? For Developers: Rapid Prototyping: Tailwind speeds up the design process, allowing developers to apply styling directly within HTML.</description>
    </item>
  </channel>
</rss>
