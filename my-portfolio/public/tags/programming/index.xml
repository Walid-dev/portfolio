<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Programming on Walid&#39;s Portfolio</title>
    <link>http://localhost:1313/tags/programming/</link>
    <description>Recent content in Programming on Walid&#39;s Portfolio</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 13 Mar 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/programming/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Deep Dive into Doctrine ORM: Empowering PHP Data Management</title>
      <link>http://localhost:1313/blogs/doctrine_orm/</link>
      <pubDate>Wed, 13 Mar 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blogs/doctrine_orm/</guid>
      <description>Deep Dive into Doctrine ORM: Empowering PHP Data Management Introduction Doctrine ORM stands as a pivotal tool in PHP development, bridging the gap between object-oriented programming and relational databases. This guide aims to elucidate the foundational and advanced features of Doctrine ORM, empowering PHP developers to optimize data management practices effectively.&#xA;Core Concepts The EntityManager: Core of Doctrine Introduction to EntityManager EntityManager acts as the central point of Doctrine&amp;rsquo;s ORM functionality, managing the lifecycle of entities.</description>
    </item>
    <item>
      <title>Harnessing JavaScript Classes: Nature and Technology Unleashed</title>
      <link>http://localhost:1313/blogs/javascript_classes/</link>
      <pubDate>Mon, 11 Mar 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blogs/javascript_classes/</guid>
      <description>Harnessing JavaScript Classes: Nature and Technology Unleashed Introduction JavaScript classes, introduced in ECMAScript 2015 (ES6), have revolutionized how developers design and implement their code. Moving beyond traditional examples, this guide explores classes through the lens of nature and technology, offering a fresh perspective on this powerful feature.&#xA;Core Concepts Defining Classes Crafting a Digital Garden Imagine creating a digital garden, where each plant is a class instance.&#xA;class Plant { constructor(species, height, color) { this.</description>
    </item>
    <item>
      <title>JavaScript Array Methods</title>
      <link>http://localhost:1313/blogs/javascript-arrays/</link>
      <pubDate>Thu, 29 Feb 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blogs/javascript-arrays/</guid>
      <description>Understanding JavaScript Array Methods Introduction JavaScript arrays are versatile data structures that allow you to store multiple values in a single variable. Array methods in JavaScript provide powerful tools for manipulating these collections, making data handling more efficient and intuitive. This article dives into the most commonly used array methods, offering insights and code examples to enhance your JavaScript programming skills.&#xA;Core Concepts Iteration Methods forEach The forEach method executes a provided function once for each array element.</description>
    </item>
    <item>
      <title>JavaScript: Core Concepts and Evolution</title>
      <link>http://localhost:1313/blogs/javascript-intro/</link>
      <pubDate>Tue, 20 Feb 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blogs/javascript-intro/</guid>
      <description>Introduction JavaScript was created in 1995 by Brendan Eich while working at Netscape. It started as a way to make web pages interactive and has grown to become a cornerstone of web development, alongside HTML and CSS.&#xA;The Start of JavaScript Origin: JavaScript was initially created to add interactivity to web pages. Netscape Navigator was the first browser to implement it. Naming: It was first called Mocha, then LiveScript, and finally renamed JavaScript.</description>
    </item>
    <item>
      <title>Design Patterns</title>
      <link>http://localhost:1313/blogs/design_patterns/</link>
      <pubDate>Fri, 16 Feb 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blogs/design_patterns/</guid>
      <description>Introduction Software design patterns are typical solutions to common problems in software design. They serve as templates for solving recurring design issues, promoting more efficient and effective development practices. This guide focuses on JavaScript and PHP examples to explore significant design patterns.&#xA;Creational Patterns Creational patterns provide mechanisms for object creation, increasing flexibility and reuse of existing code.&#xA;Factory Method in JavaScript The Factory Method pattern defines an interface for creating an object, letting subclasses alter the type of objects that will be created.</description>
    </item>
  </channel>
</rss>
